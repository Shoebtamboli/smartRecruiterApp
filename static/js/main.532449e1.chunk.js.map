{"version":3,"sources":["components/PostingList.js","components/SearchDepartment.js","components/PostingDetails.js","App.js","serviceWorker.js","index.js"],"names":["PostingList","props","postingItems","postings","map","posting","className","to","id","key","name","location","city","customField","valueLabel","SearchDepartment","searchDepartment","bind","searchCountry","state","countryNames","axios","get","then","res","setState","data","content","catch","error","console","log","e","this","target","value","departNames","names","department","label","uniqueSet","Set","uniqueSet1","filterbyDepartment","filter","filterbyCountry","filterPosts","element","includes","onChange","i","country","React","Component","PostingDetails","jobDescription","jqualifications","window","pathname","response","jobAd","sections","qualifications","title","text","App","Container","path","exact","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.532449e1.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst PostingList = (props) => {\n  const postingItems = props.postings.map((posting) => {\n    return (\n      <div className=\"post\">\n        <Link to={posting.id}>\n          <ul className=\"list-group\">\n            <li\n              className=\"list-group-item list-group-item-primary\"\n              key={posting.id}\n            >\n              <h5>{posting.name}</h5>\n              <h6>\n                {posting.location.city}, {posting.customField[1].valueLabel}\n              </h6>\n            </li>\n          </ul>\n        </Link>\n      </div>\n    );\n  });\n\n  return <ul className=\"col-md-4 list-group\">{postingItems}</ul>;\n};\n\nexport default PostingList;\n","import React from \"react\";\nimport PostingList from \"./PostingList\";\nimport axios from \"axios\";\n\nclass SearchDepartment extends React.Component {\n  constructor(props) {\n    super(props);\n    this.searchDepartment = this.searchDepartment.bind(this);\n    this.searchCountry = this.searchCountry.bind(this);\n    this.state = {\n      searchDepartment: \"Select Department\",\n      searchCountry: \"Select Country\",\n      countryNames: [],\n      postings: [],\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get(\n        \"https://api.smartrecruiters.com/v1/companies/smartrecruiters/postings\"\n      )\n      .then((res) => {\n        this.setState({\n          postings: res.data.content,\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  searchDepartment(e) {\n    this.setState({ searchDepartment: e.target.value });\n  }\n\n  searchCountry(e) {\n    console.log(e.target.value);\n    this.setState({ searchCountry: e.target.value });\n  }\n\n  render() {\n    let departNames = this.state.postings.map((names) => {\n      return names.department.label;\n    });\n    const uniqueSet = new Set(departNames);\n    departNames = [\"Select Department\", ...uniqueSet];\n\n    let countryNames = this.state.postings.map((names) => {\n      return names.customField[1].valueLabel;\n    });\n\n    const uniqueSet1 = new Set(countryNames);\n    countryNames = [\"Select Country\", ...uniqueSet1];\n\n    // filter logic for department\n    const filterbyDepartment = this.state.postings.filter((posting) => {\n      return posting.department.label === this.state.searchDepartment;\n    });\n    // filter logic for country\n    const filterbyCountry = this.state.postings.filter((posting) => {\n      return posting.customField[1].valueLabel === this.state.searchCountry;\n    });\n\n    let filterPosts = [...filterbyDepartment, ...filterbyCountry];\n\n    // when no filter is selected show all\n    if (\n      this.state.searchDepartment === \"Select Department\" &&\n      this.state.searchCountry === \"Select Country\"\n    ) {\n      filterPosts = this.state.postings;\n    } else if (\n      this.state.searchDepartment !== \"Select Department\" &&\n      this.state.searchCountry !== \"Select Country\"\n    ) {\n      filterPosts = filterbyDepartment.filter((element) =>\n        filterbyCountry.includes(element)\n      );\n    }\n\n    return (\n      <form>\n        <div className=\"form\">\n          {/* <label>Department</label> */}\n          <select\n            className=\"custom-select\"\n            value={this.props.value}\n            onChange={this.searchDepartment}\n          >\n            {departNames.map((department, i) => (\n              <option key={i} value={department}>\n                {department}\n              </option>\n            ))}\n          </select>\n\n          {/* <label>Country</label> */}\n          <select\n            className=\"custom-select\"\n            value={this.props.value}\n            onChange={this.searchCountry}\n          >\n            {countryNames.map((country, i) => (\n              <option key={i} value={country}>\n                {country}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <PostingList postings={filterPosts} />\n      </form>\n    );\n  }\n}\nexport default SearchDepartment;\n","import React from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport { Markup } from \"interweave\";\n\nclass PostingDetails extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jobDescription: [],\n      jqualifications: [],\n      name: [],\n      city: [],\n      country: [],\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get(\n        \"https://api.smartrecruiters.com/v1/companies/smartrecruiters/postings\" +\n          window.location.pathname\n      )\n      .then((response) => {\n        this.setState({\n          jobDescription: response.data.jobAd.sections.jobDescription,\n          jqualifications: response.data.jobAd.sections.qualifications,\n          name: response.data.name,\n          country: response.data.customField[1],\n          city: response.data.location,\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"details\">\n        <Link to=\"/\">back to list</Link>\n        <div className=\"post-list-details\">\n          <h5>{this.state.name}</h5>\n          <h6>\n            {this.state.city.city}\n            {\",\"} {this.state.country.valueLabel}\n          </h6>\n        </div>\n        <div className=\"post-list-details\">\n          <h4>{this.state.jobDescription.title}</h4>\n          <Markup content={this.state.jobDescription.text} />\n        </div>\n        <div className=\"post-list-details\">\n          <h4>{this.state.jqualifications.title}</h4>\n          <Markup content={this.state.jqualifications.text} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostingDetails;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport SearchDepartment from \"./components/SearchDepartment\";\nimport { Switch, Route } from \"react-router-dom\";\nimport PostingDetails from \"./components/PostingDetails\";\n\nimport { Container } from \"react-bootstrap\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"container\">\n          <Container>\n            <Router>\n              <Switch>\n                <Route path=\"/\" exact>\n                  <h1 className=\"header\">Job Search App </h1>\n                  <SearchDepartment />\n                </Route>\n\n                <Route>\n                  <PostingDetails />\n                </Route>\n              </Switch>\n            </Router>\n          </Container>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n// import './index.css';\n// Importing the Bootstrap CSS\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}